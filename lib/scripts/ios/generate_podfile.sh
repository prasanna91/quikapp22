#!/bin/bash
set -euo pipefail

log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"; }

log "🚀 Starting dynamic Podfile generation..."

# Validate required environment variables
REQUIRED_VARS=("APPLE_TEAM_ID" "BUNDLE_ID" "PROFILE_TYPE")
for VAR in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!VAR:-}" ]; then
        log "❌ Missing required variable: ${VAR}"
        exit 1
    fi
    log "✅ ${VAR}: ${!VAR}"
done

# Validate profile type
case "$PROFILE_TYPE" in
    "app-store"|"ad-hoc")
        log "✅ Valid profile type: $PROFILE_TYPE"
        ;;
    *)
        log "❌ Invalid profile type: $PROFILE_TYPE"
        log "   Supported types: app-store, ad-hoc"
        exit 1
        ;;
esac

# Set default values for optional variables
PROFILE_NAME="${PROFILE_NAME:-Twinklub App Store}"
CODE_SIGN_IDENTITY="${CODE_SIGN_IDENTITY:-Apple Distribution}"
KEYCHAIN_NAME="${KEYCHAIN_NAME:-build.keychain}"

log "📋 Configuration:"
log "   Team ID: ${APPLE_TEAM_ID}"
log "   Bundle ID: ${BUNDLE_ID}"
log "   Profile Type: ${PROFILE_TYPE}"
log "   Profile Name: ${PROFILE_NAME}"
log "   Code Sign Identity: ${CODE_SIGN_IDENTITY}"

# Get current directory for Flutter root detection
CURRENT_DIR=$(pwd)

# Function to generate Podfile for specific stage and profile type
generate_podfile() {
    local STAGE="$1"
    local PROFILE_TYPE="$2"
    
    log "📝 Generating Podfile for stage: ${STAGE}, profile: ${PROFILE_TYPE}"
    
    # Ensure ios directory exists
    mkdir -p ios
    
    # Create backup of existing Podfile
    if [ -f "ios/Podfile" ]; then
        cp ios/Podfile "ios/Podfile.backup.$(date +%Y%m%d_%H%M%S)"
        log "✅ Created backup of existing Podfile"
    fi
    
    # Generate dynamic Podfile based on stage and profile type
    cat > ios/Podfile << 'EOF'
# 🚀 DYNAMICALLY GENERATED PODFILE - DO NOT EDIT MANUALLY
# Generated by lib/scripts/ios/generate_podfile.sh
# This file is automatically generated with environment-specific variables

# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# 🔧 Pre-install hook for Firebase compatibility
pre_install do |installer|
  # Set up Firebase compatibility for all pods
  installer.pod_targets.each do |pod|
    if pod.name.start_with?('Firebase')
      # Set Swift version and other settings for Firebase pods
      pod.build_settings['SWIFT_VERSION'] = '5.0'
      pod.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
    end
    
    # Fix for GoogleDataTransport protobuf issue
    if pod.name == 'GoogleDataTransport'
      pod.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu99'
      pod.build_settings['CLANG_WARN_IMPLICIT_FUNCTION_DECLARATION'] = 'NO'
      pod.build_settings['OTHER_CFLAGS'] = '$(inherited) -Wno-implicit-function-declaration'
    end
    
    # Fix for nanopb
    if pod.name == 'nanopb'
      pod.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu99'
      pod.build_settings['CLANG_WARN_IMPLICIT_FUNCTION_DECLARATION'] = 'NO'
    end
  end
end

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
EOF

    # Add profile-specific configuration
    case "${PROFILE_TYPE}" in
        "app-store")
            printf '\n  # App Store Configuration\n  post_install do |installer|\n    installer.pods_project.targets.each do |target|\n      flutter_additional_ios_build_settings(target)\n      target.build_configurations.each do |config|\n        config.build_settings["IPHONEOS_DEPLOYMENT_TARGET"] = "13.0"\n        config.build_settings["ENABLE_BITCODE"] = "NO"\n        config.build_settings["ONLY_ACTIVE_ARCH"] = "NO"\n        config.build_settings["CODE_SIGN_STYLE"] = "Manual"\n        config.build_settings["DEVELOPMENT_TEAM"] = "%s"\n        config.build_settings["PROVISIONING_PROFILE_SPECIFIER"] = "%s"\n        config.build_settings["CODE_SIGN_IDENTITY"] = "%s"\n        config.build_settings["CODE_SIGNING_ALLOWED"] = "NO"\n        config.build_settings["CODE_SIGNING_REQUIRED"] = "NO"\n        \n        # 🔧 Swift Compiler Fixes for Firebase (Global)\n        config.build_settings["SWIFT_ACTIVE_COMPILATION_CONDITIONS"] = "$(inherited)"\n        config.build_settings["OTHER_SWIFT_FLAGS"] = "$(inherited) -enable-experimental-feature AccessLevelOnImport"\n        \n        # 🔧 Additional Firebase Compatibility\n        config.build_settings["CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER"] = "NO"\n        config.build_settings["GCC_PREPROCESSOR_DEFINITIONS"] = "$(inherited) COCOAPODS=1"\n        \n        # 🔧 GoogleDataTransport/Protobuf Fixes\n        config.build_settings["GCC_C_LANGUAGE_STANDARD"] = "gnu99"\n        config.build_settings["CLANG_WARN_IMPLICIT_FUNCTION_DECLARATION"] = "NO"\n        config.build_settings["OTHER_CFLAGS"] = "$(inherited) -Wno-implicit-function-declaration"\n        \n        # 🔧 Nanopb Integration\n        config.build_settings["HEADER_SEARCH_PATHS"] = "$(inherited) $(PODS_ROOT)/nanopb"\n        config.build_settings["LIBRARY_SEARCH_PATHS"] = "$(inherited) $(PODS_ROOT)/nanopb"\n      end\n    end\n  end\n' "${APPLE_TEAM_ID}" "${PROFILE_NAME}" "${CODE_SIGN_IDENTITY}" >> ios/Podfile
            ;;
        "ad-hoc")
            printf '\n  # Ad-Hoc Configuration\n  post_install do |installer|\n    installer.pods_project.targets.each do |target|\n      flutter_additional_ios_build_settings(target)\n      target.build_configurations.each do |config|\n        config.build_settings["IPHONEOS_DEPLOYMENT_TARGET"] = "13.0"\n        config.build_settings["ENABLE_BITCODE"] = "NO"\n        config.build_settings["ONLY_ACTIVE_ARCH"] = "NO"\n        config.build_settings["CODE_SIGN_STYLE"] = "Manual"\n        config.build_settings["DEVELOPMENT_TEAM"] = "%s"\n        config.build_settings["PROVISIONING_PROFILE_SPECIFIER"] = "%s"\n        config.build_settings["CODE_SIGN_IDENTITY"] = "%s"\n        config.build_settings["CODE_SIGNING_ALLOWED"] = "NO"\n        config.build_settings["CODE_SIGNING_REQUIRED"] = "NO"\n        config.build_settings["ENABLE_TESTABILITY"] = "YES"\n        \n        # 🔧 Swift Compiler Fixes for Firebase\n        config.build_settings["SWIFT_ACTIVE_COMPILATION_CONDITIONS"] = "$(inherited)"\n        config.build_settings["OTHER_SWIFT_FLAGS"] = "$(inherited) -enable-experimental-feature AccessLevelOnImport"\n        \n        # 🔧 Additional Firebase Compatibility\n        config.build_settings["CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER"] = "NO"\n        config.build_settings["GCC_PREPROCESSOR_DEFINITIONS"] = "$(inherited) COCOAPODS=1"\n        \n        # 🔧 GoogleDataTransport/Protobuf Fixes\n        config.build_settings["GCC_C_LANGUAGE_STANDARD"] = "gnu99"\n        config.build_settings["CLANG_WARN_IMPLICIT_FUNCTION_DECLARATION"] = "NO"\n        config.build_settings["OTHER_CFLAGS"] = "$(inherited) -Wno-implicit-function-declaration"\n        \n        # 🔧 Nanopb Integration\n        config.build_settings["HEADER_SEARCH_PATHS"] = "$(inherited) $(PODS_ROOT)/nanopb"\n        config.build_settings["LIBRARY_SEARCH_PATHS"] = "$(inherited) $(PODS_ROOT)/nanopb"\n      end\n    end\n  end\n' "${APPLE_TEAM_ID}" "${PROFILE_NAME}" "${CODE_SIGN_IDENTITY}" >> ios/Podfile
            ;;
    esac

    cat >> ios/Podfile << EOF
end
EOF

    log "✅ Podfile generated for ${STAGE} stage with ${PROFILE_TYPE} profile"
    log "📄 Podfile contents:"
    cat ios/Podfile
}

# Generate Podfile for current stage
STAGE="${PODFILE_STAGE:-flutter-build}"
generate_podfile "${STAGE}" "${PROFILE_TYPE}"

log "🎉 Dynamic Podfile generation completed successfully!"
log "📁 Podfile location: ios/Podfile"
log "🔧 Profile Type: ${PROFILE_TYPE}"
log "🏢 Team ID: ${APPLE_TEAM_ID}" 