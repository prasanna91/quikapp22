# üöÄ iOS Workflow Configuration for Codemagic
# Comprehensive iOS build and deployment workflow

# Common variables block
common_vars: &common_vars
  GRADLE_OPTS: "-Xmx12G -XX:MaxMetaspaceSize=3G -XX:ReservedCodeCacheSize=1G -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+TieredCompilation -XX:TieredStopAtLevel=1"
  XCODE_PARALLEL_JOBS: "8"
  FLUTTER_PUB_CACHE: "true"
  FLUTTER_VERBOSE: "false"
  FLUTTER_ANALYZE: "true"
  FLUTTER_TEST: "false"
  FLUTTER_BUILD_NUMBER: "auto"

# iOS-specific variables
ios_vars: &ios_vars
  WORKFLOW_ID: "ios-workflow"
  APP_NAME: $APP_NAME
  VERSION_NAME: $VERSION_NAME
  VERSION_CODE: $VERSION_CODE
  EMAIL_ID: $EMAIL_ID
  BUNDLE_ID: $BUNDLE_ID
  APPLE_TEAM_ID: $APPLE_TEAM_ID
  PROFILE_TYPE: $PROFILE_TYPE
  PROFILE_URL: $PROFILE_URL
  IS_TESTFLIGHT: $IS_TESTFLIGHT
  APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
  APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
  APP_STORE_CONNECT_API_KEY_URL: $APP_STORE_CONNECT_API_KEY_URL
  LOGO_URL: $LOGO_URL
  SPLASH_URL: $SPLASH_URL
  SPLASH_BG_COLOR: $SPLASH_BG_COLOR
  SPLASH_TAGLINE: $SPLASH_TAGLINE
  SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
  FIREBASE_CONFIG_IOS: $FIREBASE_CONFIG_IOS
  ENABLE_EMAIL_NOTIFICATIONS: $ENABLE_EMAIL_NOTIFICATIONS
  EMAIL_SMTP_SERVER: $EMAIL_SMTP_SERVER
  EMAIL_SMTP_PORT: $EMAIL_SMTP_PORT
  EMAIL_SMTP_USER: $EMAIL_SMTP_USER
  EMAIL_SMTP_PASS: $EMAIL_SMTP_PASS
  USER_NAME: $USER_NAME
  APP_ID: $APP_ID
  ORG_NAME: $ORG_NAME
  WEB_URL: $WEB_URL
  PKG_NAME: $PKG_NAME
  PUSH_NOTIFY: $PUSH_NOTIFY
  IS_CHATBOT: $IS_CHATBOT
  IS_DOMAIN_URL: $IS_DOMAIN_URL
  IS_SPLASH: $IS_SPLASH
  IS_PULLDOWN: $IS_PULLDOWN
  IS_BOTTOMMENU: $IS_BOTTOMMENU
  IS_LOAD_IND: $IS_LOAD_IND
  IS_CAMERA: $IS_CAMERA
  IS_LOCATION: $IS_LOCATION
  IS_MIC: $IS_MIC
  IS_NOTIFICATION: $IS_NOTIFICATION
  IS_CONTACT: $IS_CONTACT
  IS_BIOMETRIC: $IS_BIOMETRIC
  IS_CALENDAR: $IS_CALENDAR
  IS_STORAGE: $IS_STORAGE

# iOS Workflow
ios_workflow:
  name: iOS Workflow
  max_build_duration: 120
  environment:
    vars:
      <<: [*common_vars, *ios_vars]
      CM_BUILD_ID: $CM_BUILD_ID
      CM_BUILD_DIR: $CM_BUILD_DIR
    xcode: latest
    cocoapods: default
    flutter: stable
    groups:
      - app_store_credentials
      - firebase_credentials
      - email_credentials
    vars:
      XCODE_WORKSPACE: "ios/Runner.xcworkspace"
      XCODE_SCHEME: "Runner"
      BUNDLE_ID: $BUNDLE_ID
      APPLE_TEAM_ID: $APPLE_TEAM_ID
      PROFILE_TYPE: $PROFILE_TYPE
      PUSH_NOTIFY: $PUSH_NOTIFY
      IS_TESTFLIGHT: $IS_TESTFLIGHT

  scripts:
    - name: Setup Environment
      script: |
        echo "üöÄ Setting up iOS Workflow Environment"
        echo "======================================"
        
        # Set script permissions
        chmod +x scripts/ios-workflow/*.sh
        chmod +x lib/scripts/utils/*.sh
        
        # Create output directories
        mkdir -p output/ios
        mkdir -p build/ios/logs
        
        # Validate essential variables
        echo "üîç Validating essential variables..."
        ESSENTIAL_VARS=("BUNDLE_ID" "APPLE_TEAM_ID" "PROFILE_TYPE")
        MISSING_VARS=()
        
        for var in "${ESSENTIAL_VARS[@]}"; do
          if [ -z "${!var:-}" ]; then
            MISSING_VARS+=("$var")
          fi
        done
        
        if [ ${#MISSING_VARS[@]} -gt 0 ]; then
          echo "‚ùå Missing essential variables: ${MISSING_VARS[*]}"
          echo "üìã Required variables:"
          echo "   - BUNDLE_ID: Your app's bundle identifier"
          echo "   - APPLE_TEAM_ID: Your Apple Developer Team ID"
          echo "   - PROFILE_TYPE: Distribution type (app-store, ad-hoc, development)"
          exit 1
        fi
        
        echo "‚úÖ Environment setup completed"

    - name: Run Main Workflow
      script: |
        echo "üèóÔ∏è Running Main iOS Workflow"
        echo "============================"
        
        # Execute main workflow script
        if [ -f "scripts/ios-workflow/main_workflow.sh" ]; then
          chmod +x scripts/ios-workflow/main_workflow.sh
          ./scripts/ios-workflow/main_workflow.sh
        else
          echo "‚ùå Main workflow script not found"
          exit 1
        fi

    - name: Validate Build Results
      script: |
        echo "üõ°Ô∏è Validating Build Results"
        echo "============================"
        
        # Check if IPA was created
        if [ -f "output/ios/Runner.ipa" ]; then
          IPA_SIZE=$(stat -f%z "output/ios/Runner.ipa" 2>/dev/null || stat -c%s "output/ios/Runner.ipa" 2>/dev/null || echo "0")
          echo "‚úÖ IPA file created successfully: output/ios/Runner.ipa ($IPA_SIZE bytes)"
          
          # Validate file size
          if [ "$IPA_SIZE" -gt 1000000 ]; then
            echo "‚úÖ IPA file size is valid"
          else
            echo "‚ùå IPA file is too small ($IPA_SIZE bytes) - may be corrupted"
            exit 1
          fi
        else
          echo "‚ùå IPA file not found"
          exit 1
        fi
        
        # Check for build summaries
        if [ -f "output/ios/WORKFLOW_SUMMARY.txt" ]; then
          echo "‚úÖ Workflow summary created"
        fi
        
        if [ -f "output/ios/ASSET_SUMMARY.txt" ]; then
          echo "‚úÖ Asset summary created"
        fi
        
        if [ "$PUSH_NOTIFY" = "true" ] && [ -f "output/ios/FIREBASE_SUMMARY.txt" ]; then
          echo "‚úÖ Firebase summary created"
        fi
        
        if [ "$IS_TESTFLIGHT" = "true" ] && [ -f "output/ios/TESTFLIGHT_SUMMARY.txt" ]; then
          echo "‚úÖ TestFlight summary created"
        fi
        
        echo "‚úÖ Build validation completed successfully"

  artifacts:
    # üì± IPA Files
    - output/ios/*.ipa
    - build/ios/ipa/*.ipa
    - "*.ipa"
    
    # üì¶ Archive Files (fallback)
    - output/ios/*.xcarchive
    - build/ios/archive/*.xcarchive
    - "*.xcarchive"
    
    # üìã Build Documentation
    - output/ios/WORKFLOW_SUMMARY.txt
    - output/ios/ASSET_SUMMARY.txt
    - output/ios/FIREBASE_SUMMARY.txt
    - output/ios/TESTFLIGHT_SUMMARY.txt
    - output/ios/ARTIFACTS_SUMMARY.txt
    - ios/ExportOptions.plist
    
    # üìä Build Logs
    - build/ios/logs/
    - output/ios/logs/
    
    # üîß Additional Build Artifacts
    - output/ios/
    - build/ios/

  publishing:
    app_store_connect:
      api_key: $APP_STORE_CONNECT_PRIVATE_KEY
      key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
      issuer_id: $APP_STORE_CONNECT_ISSUER_ID
      submit_to_testflight: $IS_TESTFLIGHT
    email:
      recipients:
        - $EMAIL_ID
      notify:
        success: true
        failure: true
      subject: "iOS Build Status - $APP_NAME v$VERSION_NAME"
      body: |
        iOS build status for $APP_NAME v$VERSION_NAME ($VERSION_CODE).
        
        Build Details:
        - Bundle ID: $BUNDLE_ID
        - Profile Type: $PROFILE_TYPE
        - Push Notifications: $PUSH_NOTIFY
        - TestFlight Upload: $IS_TESTFLIGHT
        - Code Signing: Modern App Store Connect API
        
        Build artifacts and detailed summaries available in the attached files.
        
        For detailed notifications, ensure ENABLE_EMAIL_NOTIFICATIONS=true is set.

# Alternative Simplified Workflow (if main workflow fails)
ios_simple_workflow:
  name: iOS Simple Workflow
  max_build_duration: 60
  environment:
    vars:
      <<: [*common_vars, *ios_vars]
    xcode: latest
    cocoapods: default
    flutter: stable
    groups:
      - app_store_credentials

  scripts:
    - name: Setup and Build
      script: |
        echo "üöÄ iOS Simple Workflow"
        echo "======================"
        
        # Install dependencies
        flutter pub get
        flutter clean
        
        # Generate environment config
        if [ -f "lib/scripts/utils/gen_env_config.sh" ]; then
          chmod +x lib/scripts/utils/gen_env_config.sh
          ./lib/scripts/utils/gen_env_config.sh
        fi
        
        # Build iOS
        flutter build ios --release --no-codesign
        
        # Create archive
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -archivePath build/Runner.xcarchive \
          archive \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath build/Runner.xcarchive \
          -exportPath build/ios/ipa \
          -exportOptionsPlist ExportOptions.plist \
          -allowProvisioningUpdates
        
        cd ..
        
        # Copy IPA to output
        mkdir -p output/ios
        find . -name "*.ipa" -exec cp {} output/ios/Runner.ipa \;
        
        echo "‚úÖ Simple workflow completed"

  artifacts:
    - output/ios/*.ipa
    - build/ios/ipa/*.ipa
    - "*.ipa"

  publishing:
    app_store_connect:
      api_key: $APP_STORE_CONNECT_PRIVATE_KEY
      key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
      issuer_id: $APP_STORE_CONNECT_ISSUER_ID
      submit_to_testflight: $IS_TESTFLIGHT

# Workflow Triggers
triggering:
  events:
    - push
    - pull_request
    - tag
  branch_patterns:
    - pattern: main
      include: true
      source: true
    - pattern: develop
      include: true
      source: true
    - pattern: feature/*
      include: true
      source: true
  tag_patterns:
    - pattern: v*
      include: true
      source: true

# Build Configuration
build:
  environment:
    flutter: stable
    xcode: latest
    cocoapods: default
    groups:
      - app_store_credentials
      - firebase_credentials
      - email_credentials
    vars:
      XCODE_WORKSPACE: "ios/Runner.xcworkspace"
      XCODE_SCHEME: "Runner"
      BUNDLE_ID: $BUNDLE_ID
      APPLE_TEAM_ID: $APPLE_TEAM_ID
      PROFILE_TYPE: $PROFILE_TYPE
      PUSH_NOTIFY: $PUSH_NOTIFY
      IS_TESTFLIGHT: $IS_TESTFLIGHT

# Scripts Configuration
scripts:
  - name: Setup Environment
    script: |
      echo "üöÄ Setting up iOS Workflow Environment"
      echo "======================================"
      
      # Set script permissions
      chmod +x scripts/ios-workflow/*.sh
      chmod +x lib/scripts/utils/*.sh
      
      # Create output directories
      mkdir -p output/ios
      mkdir -p build/ios/logs
      
      # Validate essential variables
      echo "üîç Validating essential variables..."
      ESSENTIAL_VARS=("BUNDLE_ID" "APPLE_TEAM_ID" "PROFILE_TYPE")
      MISSING_VARS=()
      
      for var in "${ESSENTIAL_VARS[@]}"; do
        if [ -z "${!var:-}" ]; then
          MISSING_VARS+=("$var")
        fi
      done
      
      if [ ${#MISSING_VARS[@]} -gt 0 ]; then
        echo "‚ùå Missing essential variables: ${MISSING_VARS[*]}"
        echo "üìã Required variables:"
        echo "   - BUNDLE_ID: Your app's bundle identifier"
        echo "   - APPLE_TEAM_ID: Your Apple Developer Team ID"
        echo "   - PROFILE_TYPE: Distribution type (app-store, ad-hoc, development)"
        exit 1
      fi
      
      echo "‚úÖ Environment setup completed"

  - name: Run Main Workflow
    script: |
      echo "üèóÔ∏è Running Main iOS Workflow"
      echo "============================"
      
      # Execute main workflow script
      if [ -f "scripts/ios-workflow/main_workflow.sh" ]; then
        chmod +x scripts/ios-workflow/main_workflow.sh
        ./scripts/ios-workflow/main_workflow.sh
      else
        echo "‚ùå Main workflow script not found"
        exit 1
      fi

  - name: Validate Build Results
    script: |
      echo "üõ°Ô∏è Validating Build Results"
      echo "============================"
      
      # Check if IPA was created
      if [ -f "output/ios/Runner.ipa" ]; then
        IPA_SIZE=$(stat -f%z "output/ios/Runner.ipa" 2>/dev/null || stat -c%s "output/ios/Runner.ipa" 2>/dev/null || echo "0")
        echo "‚úÖ IPA file created successfully: output/ios/Runner.ipa ($IPA_SIZE bytes)"
        
        # Validate file size
        if [ "$IPA_SIZE" -gt 1000000 ]; then
          echo "‚úÖ IPA file size is valid"
        else
          echo "‚ùå IPA file is too small ($IPA_SIZE bytes) - may be corrupted"
          exit 1
        fi
      else
        echo "‚ùå IPA file not found"
        exit 1
      fi
      
      # Check for build summaries
      if [ -f "output/ios/WORKFLOW_SUMMARY.txt" ]; then
        echo "‚úÖ Workflow summary created"
      fi
      
      if [ -f "output/ios/ASSET_SUMMARY.txt" ]; then
        echo "‚úÖ Asset summary created"
      fi
      
      if [ "$PUSH_NOTIFY" = "true" ] && [ -f "output/ios/FIREBASE_SUMMARY.txt" ]; then
        echo "‚úÖ Firebase summary created"
      fi
      
      if [ "$IS_TESTFLIGHT" = "true" ] && [ -f "output/ios/TESTFLIGHT_SUMMARY.txt" ]; then
        echo "‚úÖ TestFlight summary created"
      fi
      
      echo "‚úÖ Build validation completed successfully"

# Artifacts Configuration
artifacts:
  # üì± IPA Files
  - output/ios/*.ipa
  - build/ios/ipa/*.ipa
  - "*.ipa"
  
  # üì¶ Archive Files (fallback)
  - output/ios/*.xcarchive
  - build/ios/archive/*.xcarchive
  - "*.xcarchive"
  
  # üìã Build Documentation
  - output/ios/WORKFLOW_SUMMARY.txt
  - output/ios/ASSET_SUMMARY.txt
  - output/ios/FIREBASE_SUMMARY.txt
  - output/ios/TESTFLIGHT_SUMMARY.txt
  - output/ios/ARTIFACTS_SUMMARY.txt
  - ios/ExportOptions.plist
  
  # üìä Build Logs
  - build/ios/logs/
  - output/ios/logs/
  
  # üîß Additional Build Artifacts
  - output/ios/
  - build/ios/

# Publishing Configuration
publishing:
  app_store_connect:
    api_key: $APP_STORE_CONNECT_PRIVATE_KEY
    key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
    issuer_id: $APP_STORE_CONNECT_ISSUER_ID
    submit_to_testflight: $IS_TESTFLIGHT
  email:
    recipients:
      - $EMAIL_ID
    notify:
      success: true
      failure: true
    subject: "iOS Build - $APP_NAME v$VERSION_NAME"
    body: |
      iOS build completed for $APP_NAME v$VERSION_NAME ($VERSION_CODE).
      
      Build Details:
      - Bundle ID: $BUNDLE_ID
      - Profile Type: $PROFILE_TYPE
      - Push Notifications: $PUSH_NOTIFY
      - TestFlight Upload: $IS_TESTFLIGHT
      
      Build artifacts available in the attached files. 